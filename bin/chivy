#!/usr/bin/env ruby
# coding: utf-8

require 'commander/import'
require 'chivy'
require 'key_path'

program :name, 'chivy'
program :version, Chivy::VERSION
program :description, 'List and fill missing translation keys in YAML-files.'

default_command :check

command :list do |c|
  c.syntax      = 'chivy [list|ls|check] [options]'
  c.description = 'List missing keys'
  c.example 'List missing translation keys', 'chivy list'
  c.example 'List missing translation keys of in directory config/locales/', 'chivy list config/locales'
  #c.example 'List missing translation keys in directory config/locales/application*', 'chivy list config/locales/application*'
  c.action do |args, options|

    folder = args[1] || '.'
    files = Dir.entries(folder)

    tree_manager = Chivy::TreeManager.load(folder, files)
    tree_manager.each_base_name_permutation do |reference_translation, translation|
      next if translation.file == reference_translation.file

      say "\n--- #{reference_translation.file} to #{translation.file}"

      puts reference_translation.inspect
      puts translation.inspect

      tree_diff = Chivy::TreeDiff.new(reference_translation.tree[reference_translation.locale],
                                      translation.tree[translation.locale])
      tree_diff.each do |diff_set|

        say(color("#{change_verbose(diff_set[0])} #{diff_set[1]}: #{diff_set[2]}", change_color(diff_set[0])))

        if diff_set[0] == '+'
          # may adds missing key
          if diff_set[2].is_a? Hash
            diff_set[2].each do |key, value|
              tree_path = "#{reference_translation.locale}.#{diff_set[1]}.#{key}"
              new_value = prompt_fill_value tree_path

              reference_translation.dig(tree_path)

              #path = KeyPath::Path.new tree_path
              #reference_translation.tree.set_keypath("#{reference_translation.locale}.#{diff_set[1]}.#{key}", new_value)
            end
          else
            prompt_fill_value "#{reference_translation.locale}.#{diff_set[1]}"
          end
        elsif diff_set[0] == '-'
          # may remove existing key
          agree("Remove key in #{translation.file}?")
        end

      end
    end
  end
end
alias_command :ls, :list, :check


def prompt_fill_value(tree_path)
  new_value = ask("#{tree_path}: ")
  puts new_value
  new_value
end


def change_color(change_type)
  case change_type
  when '-'
    :red
  when '+'
    :green
  else
    :yellow
  end
end

def change_verbose(change_type)
  case change_type
  when '-'
    'Delete'
  when '+'
    'Add'
  else
    'Modify'
  end
end
